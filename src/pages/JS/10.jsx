import React from 'react'
import { Link } from 'react-router'

function Ten() {
	return (
		<>
			<div className='conteiner'>
				<Link to='/courses/js'>
					<div className='before'>
						<i className='bx bx-right-arrow-alt'></i>
					</div>
				</Link>
				<h1 style={{ textAlign: 'center' }}>Функции в языке JavaScript</h1>
				<p>
					Функции в JavaScript выполняют важную роль. Они обеспечивают
					сокращение кода за счет вынесения его в отдельные места. За урок мы
					научимся создавать функции и передавать в них значения.
				</p>
				<div className='block-video'>
					<h2>Видео урок</h2>
					<iframe
						width='560'
						height='315'
						src='https://www.youtube.com/embed/yUTwuyfTsOc?si=AGqzQukDmQ8Z4GZa'
						title='YouTube video player'
						frameBorder='0'
						allow='accelerometer; 
      autoplay; 
      clipboard-write; 
      encrypted-media; 
      gyroscope; 
      picture-in-picture; 
      web-share'
						referrerPolicy='strict-origin-when-cross-origin'
						allowFullScreen
					></iframe>
				</div>
				<p>
					Функции можно назвать небольшими подпрограммами, куда можно вынести
					повторяющийся код и обращаться к нему, когда это будет нужно. Функции
					значительно облегчают построение программ, так как нам не надо
					копировать однотипный код множество раз, а можно просто
					воспользоваться одной общей функцией.
					<br />
					<br />
					Многие путают функции и методы и не понимают отличий между ними. На
					самом деле отличий нет, так как что методы, что функции являются одним
					и тем же. Функции что записаны вне классов называют функциями, а
					функции что записаны внутри классов называются методами.
					<br />
					<br />
					Точно такая же ситуация обстоит с переменным. В классах переменные
					называются полями, а вне классов - переменными.
					<br />
					<br />В JS функции создаются при помощи ключевого слова
					<code>function</code>. Каждая функция может иметь какие-либо параметры
					или же не иметь их вовсе. Функции способны что-либо возвращать в ходе
					выполнения кода, если это требуется.
				</p>
				<h2>Создание функции</h2>
				<p>
					На основе всех данных наша функция будет выглядеть следующим образом:
				</p>
				<div className='block-code'>
					<img src='/public/img/course/js-img/Screenshot_23.png' alt='' />
				</div>
				<p>
					Функция выше не принимает никаких параметров и ничего не возвращает.
					Она просто пишет слово в консоль. Давайте разнообразим функцию и
					добавим параметр:
				</p>
				<div className='block-code'>
					<img src='/public/img/course/js-img/Screenshot_24.png' alt='' />
				</div>
				<p>
					Теперь функция принимает параметр, который будет отображен в консоли.
					<br /> <br />
					Если функция должна что-либо вернуть, то прописываем тип данных
					который будет возвращен. Для возвращения данных используем ключевое
					слово <code>return</code>:
				</p>
				<div className='block-code'>
					<img src='/public/img/course/js-img/Screenshot_25.png' alt='' />
				</div>
				<h2>Локальные и глобальные переменные</h2>
				<p>
					В <b>JavaScript</b> есть несколько полей видимости: локальная и
					глобальная. Если записать глобальную переменную, то такая переменная
					будем видна повсюду и с ней можно работать отовсюду в документе. Если
					записать локальную переменную, то такая переменная будет видна лишь в
					той области, где она записана.
					<br />
					<br />
					Для создания глобальной переменной её необходимо прописать вне
					функции, класса или же объекта. Для создания локальных переменных вам
					достаточно поместить переменную в функцию. Переменная в функции будет
					видна лишь внутри блока с функцией и нигде более.
				</p>
			</div>
		</>
	)
}

export default Ten
