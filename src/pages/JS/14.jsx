import React from 'react'
import { Link } from 'react-router'

function Fourteen() {
	return (
		<>
			<div className='conteiner'>
				<Link to='/courses/js'>
					<div className='before'>
						<i className='bx bx-right-arrow-alt'></i>
					</div>
				</Link>
				<h1 style={{ textAlign: 'center' }}>
					Создание объектов. Встроенные функции
				</h1>
				<p>
					JavaScript обладает набором встроенных классов и функций, что можно
					использовать из «коробки». Мы научимся работать с датой и рассмотрим
					методы для работы с массивами. Дополнительно мы научимся создавать
					свои собственные классы в Js.
				</p>
				<div className='block-video'>
					<h2>Видео урок</h2>
					<iframe
						width='560'
						height='315'
						src='https://www.youtube.com/embed/jtw15FBCETE?si=3_V-_OfoAfW-AzWY'
						title='YouTube video player'
						frameBorder='0'
						allow='accelerometer; 
      autoplay; 
      clipboard-write; 
      encrypted-media; 
      gyroscope; 
      picture-in-picture; 
      web-share'
						referrerPolicy='strict-origin-when-cross-origin'
						allowFullScreen
					></iframe>
				</div>
				<h2>Работа с датой</h2>
				<p>
					Для работы с датой и временем в JavaScript есть предусмотренный класс
					<code>Date</code>. <br />
					<br />
					Сперва необходимо создать объект на основе класса. Для этого пропишите
					следующую конструкцию:
				</p>
				<div className='block-code'>
					<img src='/img/course/js-img/Screenshot_32.png' alt='' />
				</div>
				<p>
					Далее через объект <code>time_date</code> вы можете обращаться ко всем
					методам класса <b>Date</b> и получать все значения связанные с датой и
					временем.
				</p>
				<h2>Работа со строками</h2>
				<p>
					Каждая строка представляет из себя массив символов. По этой причине
					можно работать с любой строкой как с обычным массивом.
					<br />
					<br />
					Пример вывода элемента из строки:
				</p>
				<div className='block-code'>
					<img src='/img/course/js-img/Screenshot_33.png' alt='' />
				</div>
				<p>
					Также мы можем искать символы в строке или же возводить все символы в
					верхний (<code>toUpperCase</code>) или нижний регистр (
					<code>toLowerCase</code>).
				</p>
				<h2>Классы и объекты. Понятие ООП</h2>
				<p>
					На начальном этапе ООП – это тёмный лес, в котором многое непонятно и
					слишком усложнено. На самом деле всё вовсе не так. Предлагаем
					абстрагироваться от специфических (непонятных) определений и
					познакомиться с ООП простыми словами.
					<br /> <br />
					Поскольку на примере все усвоить гораздо проще, то давайте за пример
					возьмем робота, которого постараемся описать за счёт классов в ООП.
					<br /> <br />
					<b>Класс</b> в случае с роботом – это его чертёж. Экземпляром класса
					(объектом) называет целый робот, который создан точно по чертежу.
					<br /> <br />
					<b>Наследование</b> – это добавление полезных опций к чертежу робота.
					К примеру, берем стандартный чертёж робота и дорисуем к нему лазеры,
					крылья и броню. Все эти дорисовки мы сделаем в классе наследнике,
					основной функционал которого взят из родительского класса.
					<br /> <br />
					<b>Полиморфизм</b> – это общий функционал для всех роботов и не важно
					что каждый робот может очень сильно отличаться друг от друга. К
					примеру, в главном классе мы указываем возможность передвижения для
					всех последующих роботов. Далее в классе наследнике мы можем
					дополнительно указать возможность левитации для робота, в другом же
					классе укажем возможность передвижения по воде и так далее.
					Получается, что есть общий функционал что записан в главном чертеже,
					но его можно переписать для каждого последующего робота (для каждого
					наследника).
					<br /> <br />А <b>инкапсуляция</b> является для нас бронёй, защищающей
					робота. Под пластырем брони находятся уязвимые элементы, вроде
					проводов и микросхем. После прикрытия брешей с помощью брони, робот
					полностью защищён от внешних вмешательств. По сути, мы делаем доступ
					ко всем полям лишь за счёт методов, тем самым прямой доступ к полю
					будет закрыт.
					<br /> <br />У всех классов методы могут отличаться, как и поля с
					конструкторами. Каждый класс позволяет создавать любое количество
					разных объектов, все из них имеют собственные характеристики.
				</p>
			</div>
		</>
	)
}

export default Fourteen
